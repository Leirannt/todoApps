const{log}=require("neo-async");class AppBar extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.shadowRoot.innerHTML="\n            <style>\n                :host {\n                    display: block;\n                    background-color: #007bff;\n                    padding: 15px;\n                    color: white;\n                    text-align: center;\n                    font-size: 1.5em;\n                    font-weight: 600;\n                    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n                    position: sticky;\n                    top: 0;\n                    z-index: 1000;\n                }\n                div {\n                    max-width: 1200px;\n                    margin: 0 auto;\n                }\n            </style>\n            <div>Notes App</div>\n        "}}customElements.define("app-bar",AppBar);class NoteItem extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.shadowRoot.innerHTML='\n            <style>\n                :host {\n                    display: block;\n                    background-color: #ffffff;\n                    padding: 20px;\n                    margin-bottom: 20px;\n                    border-radius: 10px;\n                    border: 1px solid #ddd;\n                    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);\n                    overflow: hidden;\n                    position: relative;\n                }\n                h2 {\n                    font-size: 1.5em;\n                    margin-bottom: 10px;\n                    color: #007bff;\n                    font-weight: 600;\n                }\n                p {\n                    font-size: 1em;\n                    color: #555;\n                    overflow-wrap: break-word;\n                }\n                .date {\n                    font-size: 0.85em;\n                    color: #888;\n                }\n                .delete-btn {\n                    position: absolute;\n                    top: 10px;\n                    right: 10px;\n                    background-color: #ff4d4f;\n                    border: none;\n                    color: white;\n                    padding: 5px 10px;\n                    border-radius: 5px;\n                    cursor: pointer;\n                    font-size: 0.85em;\n                }\n                .delete-btn:hover {\n                    background-color: #ff1a1f;\n                }\n            </style>\n            <h2></h2>\n            <p></p>\n            <span class="date"></span>\n            <button class="delete-btn">Delete</button>\n        '}connectedCallback(){this.shadowRoot.querySelector("h2").textContent=this.getAttribute("title"),this.shadowRoot.querySelector("p").textContent=this.getAttribute("body"),this.shadowRoot.querySelector(".date").textContent=new Date(this.getAttribute("date")).toLocaleDateString(),this.shadowRoot.querySelector(".delete-btn").addEventListener("click",(()=>{deleteNoteFromApi(this.getAttribute("note-id"))}))}}customElements.define("note-item",NoteItem);class NoteForm extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.shadowRoot.innerHTML='\n            <style>\n                form {\n                    display: flex;\n                    flex-direction: column;\n                    gap: 15px;\n                    background-color: #f9f9f9;\n                    padding: 20px;\n                    border-radius: 8px;\n                    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);\n                }\n                input, textarea {\n                    padding: 15px;\n                    border-radius: 8px;\n                    border: 1px solid #ddd;\n                    font-size: 1em;\n                    background-color: #f0f2f5;\n                }\n                button {\n                    padding: 15px;\n                    border: none;\n                    background-color: #007bff;\n                    color: white;\n                    border-radius: 8px;\n                    font-size: 1em;\n                    font-weight: 600;\n                    cursor: pointer;\n                    transition: background-color 0.3s ease;\n                }\n                button:hover {\n                    background-color: #0056b3;\n                }\n            </style>\n            <form id="noteForm">\n                <input type="text" id="title" placeholder="Note Title" required>\n                <textarea id="body" placeholder="Note Body" rows="4" required></textarea>\n                <button type="submit">Add Note</button>\n            </form>\n        '}connectedCallback(){const t=this.shadowRoot.querySelector("#noteForm");t.addEventListener("submit",(e=>{e.preventDefault(),addNote(this.shadowRoot.querySelector("#title").value,this.shadowRoot.querySelector("#body").value),t.reset()}))}}customElements.define("note-form",NoteForm);const notesData=JSON.parse(localStorage.getItem("notesData"))||[];function saveNotesToLocalStorage(){localStorage.setItem("notesData",JSON.stringify(notesData))}function addNote(t,e){const n={id:`notes-${Date.now()}`,title:t,body:e,createdAt:(new Date).toISOString(),archived:!1};notesData.push(n),saveNotesToLocalStorage(),addNoteToApi(t,e).then((()=>{renderNotes()})).catch((t=>{console.error("Gagal menambahkan catatan ke API:",t)})),renderNotes()}async function renderNotes(){const t=document.getElementById("notes-container");t.innerHTML="";try{(await fetchNotes()).forEach((e=>{const n=document.createElement("note-item");n.setAttribute("note-id",e.id),n.setAttribute("title",e.title),n.setAttribute("body",e.body),n.setAttribute("date",e.createdAt),t.appendChild(n)}))}catch(t){console.error("Gagal memuat catatan dari API:",t)}}function showLoading(){document.getElementById("loading").style.display="block"}function hideLoading(){document.getElementById("loading").style.display="none"}document.addEventListener("click",(t=>{t.target.classList.contains("delete-btn")&&deleteNoteFromApi(t.target.getAttribute("note-id"))})),document.addEventListener("DOMContentLoaded",(()=>{const t=document.querySelector("note-form form"),e=document.getElementById("title"),n=document.getElementById("body");function o(t){Swal.fire({icon:"error",title:"Oops...",text:t,confirmButtonText:"OK"})}e&&n&&(e.addEventListener("input",(()=>{""===e.value.trim()?e.classList.add("error"):e.classList.remove("error")})),n.addEventListener("input",(()=>{""===n.value.trim()?n.classList.add("error"):n.classList.remove("error")}))),t&&t.addEventListener("submit",(a=>{a.preventDefault();const r=e.value.trim(),s=n.value.trim();if(""===r||""===s)return""===r&&o("Title is required!"),void(""===s&&o("Body is required!"));const i=document.createElement("note-item");noteElement.setAttribute("note-id",note.id),i.setAttribute("title",r),i.setAttribute("body",s),i.setAttribute("date",(new Date).toLocaleDateString());const d=document.getElementById("notes-container");d&&d.appendChild(i),t.reset(),Swal.fire("Success!","Note added successfully!","success")})),document.addEventListener("click",(t=>{t.target.classList.contains("delete-btn")&&t.target.closest("note-item").remove()}))}));const API_URL="https://notes-api.dicoding.dev/v2/notes";async function addNoteToApi(t,e){try{const n=await fetch(API_URL,{headers:{"Content-Type":"application/json"},method:"POST",body:JSON.stringify({title:t,body:e})}),o=await n.json();if(!n.ok)throw new Error(o.message||"Gagal menambahkan catatan.");return console.log("masuk"),console.log("Catatan berhasil ditambahkan:",o),o}catch(t){throw console.error("Error saat menambahkan catatan:",t),t}}async function fetchNotes(){console.log("hay"),showLoading(),setTimeout((async()=>{try{const t=await fetch(API_URL,{headers:{"Content-Type":"application/json"},method:"GET"});if(!t.ok)throw new Error("Gagal mengambil daftar catatan");return(await t.json()).data}catch(t){return console.error("Error fetching notes:",t),[]}finally{hideLoading()}}),5e3)}async function deleteNoteFromApi(t){showLoading();try{const e=await fetch(`${API_URL}/${t}`,{headers:{"Content-Type":"application/json"},method:"DELETE"}),n=await e.json();if(!e.ok)throw new Error(n.message||"Gagal menghapus catatan.");console.log("Catatan berhasil dihapus:",n),renderNotes()}catch(t){throw console.error("Error saat menghapus catatan:",t),t}finally{hideLoading()}}document.addEventListener("DOMContentLoaded",(()=>{console.log("disini"),renderNotes()}));